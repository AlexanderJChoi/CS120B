
achoi035_lab02_part4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000014c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000866  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000078e  00000000  00000000  00000a96  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002d2  00000000  00000000  00001224  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000014f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000411  00000000  00000000  0000151c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ae  00000000  00000000  0000192d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000019db  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	56 c0       	rjmp	.+172    	; 0x148 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:


int main(void)
{
    /* Replace with your application code */
	DDRA = 0x00; PORTA = 0xFF;
  9e:	11 b8       	out	0x01, r1	; 1
  a0:	8f ef       	ldi	r24, 0xFF	; 255
  a2:	82 b9       	out	0x02, r24	; 2
	DDRB = 0x00; PORTB = 0xFF;
  a4:	14 b8       	out	0x04, r1	; 4
  a6:	85 b9       	out	0x05, r24	; 5
	DDRC = 0x00; PORTC = 0xFF;
  a8:	17 b8       	out	0x07, r1	; 7
  aa:	88 b9       	out	0x08, r24	; 8
	DDRD = 0xFF; PORTD = 0x00;
  ac:	8a b9       	out	0x0a, r24	; 10
  ae:	1b b8       	out	0x0b, r1	; 11
	
	unsigned char tempA = 0x00, tempB = 0x00, tempC = 0x00, tempD = 0x00;
  b0:	80 e0       	ldi	r24, 0x00	; 0
	unsigned int tempSum = 0x00;
	
    while (1) 
    {
		tempA = PINA;
  b2:	60 b1       	in	r22, 0x00	; 0
		tempB = PINB;
  b4:	23 b1       	in	r18, 0x03	; 3
		tempC = PINC;
  b6:	96 b1       	in	r25, 0x06	; 6
		tempSum = tempA + tempB + tempC;
  b8:	e6 2f       	mov	r30, r22
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	49 2f       	mov	r20, r25
  be:	50 e0       	ldi	r21, 0x00	; 0
  c0:	df 01       	movw	r26, r30
  c2:	a2 0f       	add	r26, r18
  c4:	b1 1d       	adc	r27, r1
  c6:	9d 01       	movw	r18, r26
  c8:	24 0f       	add	r18, r20
  ca:	35 1f       	adc	r19, r21
		
		if(tempSum > 140) {
  cc:	2d 38       	cpi	r18, 0x8D	; 141
  ce:	31 05       	cpc	r19, r1
  d0:	10 f0       	brcs	.+4      	; 0xd6 <main+0x38>
			tempD = tempD | 0x01;
  d2:	81 60       	ori	r24, 0x01	; 1
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <main+0x3a>
		} else {
			tempD = tempD & 0xFE;
  d6:	8e 7f       	andi	r24, 0xFE	; 254
		}
		
		if(((tempA >= tempC) && (tempA - tempC > 80)) || ((tempC >= tempA) && (tempC - tempA > 80))) {
  d8:	69 17       	cp	r22, r25
  da:	40 f0       	brcs	.+16     	; 0xec <main+0x4e>
  dc:	df 01       	movw	r26, r30
  de:	a4 1b       	sub	r26, r20
  e0:	b5 0b       	sbc	r27, r21
  e2:	a1 35       	cpi	r26, 0x51	; 81
  e4:	b1 05       	cpc	r27, r1
  e6:	3c f4       	brge	.+14     	; 0xf6 <main+0x58>
  e8:	96 17       	cp	r25, r22
  ea:	38 f0       	brcs	.+14     	; 0xfa <main+0x5c>
  ec:	4e 1b       	sub	r20, r30
  ee:	5f 0b       	sbc	r21, r31
  f0:	41 35       	cpi	r20, 0x51	; 81
  f2:	51 05       	cpc	r21, r1
  f4:	14 f0       	brlt	.+4      	; 0xfa <main+0x5c>
			tempD = tempD | 0x02;
  f6:	82 60       	ori	r24, 0x02	; 2
  f8:	01 c0       	rjmp	.+2      	; 0xfc <main+0x5e>
		} else {
			tempD = tempD & 0xFD;
  fa:	8d 7f       	andi	r24, 0xFD	; 253
		}
		
		
		tempD = (tempD & 0x03);
  fc:	83 70       	andi	r24, 0x03	; 3
		if(tempSum < 128 && tempSum >= 0) {
  fe:	20 38       	cpi	r18, 0x80	; 128
 100:	31 05       	cpc	r19, r1
 102:	10 f4       	brcc	.+4      	; 0x108 <main+0x6a>
			tempD = tempD | 0x04;
 104:	84 60       	ori	r24, 0x04	; 4
 106:	1e c0       	rjmp	.+60     	; 0x144 <main+0xa6>
		} else if(tempSum >= 128 && tempSum < 128 * 2) {
 108:	a9 01       	movw	r20, r18
 10a:	40 58       	subi	r20, 0x80	; 128
 10c:	51 09       	sbc	r21, r1
 10e:	40 38       	cpi	r20, 0x80	; 128
 110:	51 05       	cpc	r21, r1
 112:	10 f4       	brcc	.+4      	; 0x118 <main+0x7a>
			tempD = tempD | 0x08;
 114:	88 60       	ori	r24, 0x08	; 8
 116:	16 c0       	rjmp	.+44     	; 0x144 <main+0xa6>
		} else if(tempSum >= 128 *2 && tempSum < 128 * 3) {
 118:	a9 01       	movw	r20, r18
 11a:	5a 95       	dec	r21
 11c:	40 38       	cpi	r20, 0x80	; 128
 11e:	51 05       	cpc	r21, r1
 120:	10 f4       	brcc	.+4      	; 0x126 <main+0x88>
			tempD = tempD | 0x10;
 122:	80 61       	ori	r24, 0x10	; 16
 124:	0f c0       	rjmp	.+30     	; 0x144 <main+0xa6>
		} else if(tempSum >= 128 * 3 && tempSum < 128 * 4) {
 126:	a9 01       	movw	r20, r18
 128:	40 58       	subi	r20, 0x80	; 128
 12a:	51 40       	sbci	r21, 0x01	; 1
 12c:	40 38       	cpi	r20, 0x80	; 128
 12e:	51 05       	cpc	r21, r1
 130:	10 f4       	brcc	.+4      	; 0x136 <main+0x98>
			tempD = tempD | 0x20;
 132:	80 62       	ori	r24, 0x20	; 32
 134:	07 c0       	rjmp	.+14     	; 0x144 <main+0xa6>
		} else if(tempSum >= 128 * 4 && tempSum < 128 * 5) {
 136:	32 50       	subi	r19, 0x02	; 2
 138:	20 38       	cpi	r18, 0x80	; 128
 13a:	31 05       	cpc	r19, r1
 13c:	10 f4       	brcc	.+4      	; 0x142 <main+0xa4>
			tempD = tempD | 0x40;
 13e:	80 64       	ori	r24, 0x40	; 64
 140:	01 c0       	rjmp	.+2      	; 0x144 <main+0xa6>
		} else {
			tempD = tempD | 0x80;
 142:	80 68       	ori	r24, 0x80	; 128
		}
		
		
		PORTD = tempD;
 144:	8b b9       	out	0x0b, r24	; 11
    }
 146:	b5 cf       	rjmp	.-150    	; 0xb2 <main+0x14>

00000148 <_exit>:
 148:	f8 94       	cli

0000014a <__stop_program>:
 14a:	ff cf       	rjmp	.-2      	; 0x14a <__stop_program>
